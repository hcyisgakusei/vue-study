{"remainingRequest":"/Users/tech/workspace/demo/vue-demo/node_modules/babel-loader/lib/index.js!/Users/tech/workspace/demo/vue-demo/src/vueResource/core/observer/array.js","dependencies":[{"path":"/Users/tech/workspace/demo/vue-demo/src/vueResource/core/observer/array.js","mtime":1596450179000},{"path":"/Users/tech/workspace/demo/vue-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tech/workspace/demo/vue-demo/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZm9yLWVhY2giOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zbGljZSI7CgovKgogKiBub3QgdHlwZSBjaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBmbG93IGRvZXNuJ3QgcGxheSB3ZWxsIHdpdGgKICogZHluYW1pY2FsbHkgYWNjZXNzaW5nIG1ldGhvZHMgb24gQXJyYXkgcHJvdG90eXBlCiAqLwppbXBvcnQgeyBkZWYgfSBmcm9tICcuLi91dGlsL2luZGV4JzsKdmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7CmV4cG9ydCB2YXIgYXJyYXlNZXRob2RzID0gT2JqZWN0LmNyZWF0ZShhcnJheVByb3RvKTsKdmFyIG1ldGhvZHNUb1BhdGNoID0gWydwdXNoJywgJ3BvcCcsICdzaGlmdCcsICd1bnNoaWZ0JywgJ3NwbGljZScsICdzb3J0JywgJ3JldmVyc2UnXTsKLyoqCiAqIEludGVyY2VwdCBtdXRhdGluZyBtZXRob2RzIGFuZCBlbWl0IGV2ZW50cwogKi8KCm1ldGhvZHNUb1BhdGNoLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZCkgewogIC8vIGNhY2hlIG9yaWdpbmFsIG1ldGhvZAogIHZhciBvcmlnaW5hbCA9IGFycmF5UHJvdG9bbWV0aG9kXTsKICBkZWYoYXJyYXlNZXRob2RzLCBtZXRob2QsIGZ1bmN0aW9uIG11dGF0b3IoKSB7CiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHsKICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTsKICAgIH0KCiAgICB2YXIgcmVzdWx0ID0gb3JpZ2luYWwuYXBwbHkodGhpcywgYXJncyk7CiAgICB2YXIgb2IgPSB0aGlzLl9fb2JfXzsKICAgIHZhciBpbnNlcnRlZDsKCiAgICBzd2l0Y2ggKG1ldGhvZCkgewogICAgICBjYXNlICdwdXNoJzoKICAgICAgY2FzZSAndW5zaGlmdCc6CiAgICAgICAgaW5zZXJ0ZWQgPSBhcmdzOwogICAgICAgIGJyZWFrOwoKICAgICAgY2FzZSAnc3BsaWNlJzoKICAgICAgICBpbnNlcnRlZCA9IGFyZ3Muc2xpY2UoMik7CiAgICAgICAgYnJlYWs7CiAgICB9CgogICAgaWYgKGluc2VydGVkKSBvYi5vYnNlcnZlQXJyYXkoaW5zZXJ0ZWQpOyAvLyBub3RpZnkgY2hhbmdlCgogICAgb2IuZGVwLm5vdGlmeSgpOwogICAgcmV0dXJuIHJlc3VsdDsKICB9KTsKfSk7"},{"version":3,"sources":["/Users/tech/workspace/demo/vue-demo/src/vueResource/core/observer/array.js"],"names":["def","arrayProto","Array","prototype","arrayMethods","Object","create","methodsToPatch","forEach","method","original","mutator","args","result","apply","ob","__ob__","inserted","slice","observeArray","dep","notify"],"mappings":";;;AAAA;;;;AAKA,SAAQA,GAAR,QAAkB,eAAlB;AAEA,IAAMC,UAAU,GAAGC,KAAK,CAACC,SAAzB;AACA,OAAO,IAAMC,YAAY,GAAGC,MAAM,CAACC,MAAP,CAAcL,UAAd,CAArB;AAEP,IAAMM,cAAc,GAAG,CACrB,MADqB,EAErB,KAFqB,EAGrB,OAHqB,EAIrB,SAJqB,EAKrB,QALqB,EAMrB,MANqB,EAOrB,SAPqB,CAAvB;AAUA;;;;AAGAA,cAAc,CAACC,OAAf,CAAuB,UAAUC,MAAV,EAAkB;AACvC;AACA,MAAMC,QAAQ,GAAGT,UAAU,CAACQ,MAAD,CAA3B;AACAT,EAAAA,GAAG,CAACI,YAAD,EAAeK,MAAf,EAAuB,SAASE,OAAT,GAA0B;AAAA,sCAANC,IAAM;AAANA,MAAAA,IAAM;AAAA;;AAClD,QAAMC,MAAM,GAAGH,QAAQ,CAACI,KAAT,CAAe,IAAf,EAAqBF,IAArB,CAAf;AACA,QAAMG,EAAE,GAAG,KAAKC,MAAhB;AACA,QAAIC,QAAJ;;AACA,YAAQR,MAAR;AACE,WAAK,MAAL;AACA,WAAK,SAAL;AACEQ,QAAAA,QAAQ,GAAGL,IAAX;AACA;;AACF,WAAK,QAAL;AACEK,QAAAA,QAAQ,GAAGL,IAAI,CAACM,KAAL,CAAW,CAAX,CAAX;AACA;AAPJ;;AASA,QAAID,QAAJ,EAAcF,EAAE,CAACI,YAAH,CAAgBF,QAAhB,EAboC,CAclD;;AACAF,IAAAA,EAAE,CAACK,GAAH,CAAOC,MAAP;AACA,WAAOR,MAAP;AACD,GAjBE,CAAH;AAkBD,CArBD","sourcesContent":["/*\n * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */\n\nimport {def} from '../util/index'\n\nconst arrayProto = Array.prototype\nexport const arrayMethods = Object.create(arrayProto)\n\nconst methodsToPatch = [\n  'push',\n  'pop',\n  'shift',\n  'unshift',\n  'splice',\n  'sort',\n  'reverse'\n]\n\n/**\n * Intercept mutating methods and emit events\n */\nmethodsToPatch.forEach(function (method) {\n  // cache original method\n  const original = arrayProto[method]\n  def(arrayMethods, method, function mutator(...args) {\n    const result = original.apply(this, args)\n    const ob = this.__ob__\n    let inserted\n    switch (method) {\n      case 'push':\n      case 'unshift':\n        inserted = args\n        break\n      case 'splice':\n        inserted = args.slice(2)\n        break\n    }\n    if (inserted) ob.observeArray(inserted)\n    // notify change\n    ob.dep.notify()\n    return result\n  })\n})\n"]}]}