{"remainingRequest":"/Users/tech/workspace/demo/vue-demo/node_modules/babel-loader/lib/index.js!/Users/tech/workspace/demo/vue-demo/src/vueResource/compiler/index.js","dependencies":[{"path":"/Users/tech/workspace/demo/vue-demo/src/vueResource/compiler/index.js","mtime":1596450179000},{"path":"/Users/tech/workspace/demo/vue-demo/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/tech/workspace/demo/vue-demo/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnRyaW0iOwoKLyogICAgICAgKi8KaW1wb3J0IHsgcGFyc2UgfSBmcm9tICcuL3BhcnNlci9pbmRleCc7CmltcG9ydCB7IG9wdGltaXplIH0gZnJvbSAnLi9vcHRpbWl6ZXInOwppbXBvcnQgeyBnZW5lcmF0ZSB9IGZyb20gJy4vY29kZWdlbi9pbmRleCc7CmltcG9ydCB7IGNyZWF0ZUNvbXBpbGVyQ3JlYXRvciB9IGZyb20gJy4vY3JlYXRlLWNvbXBpbGVyJzsgLy8gYGNyZWF0ZUNvbXBpbGVyQ3JlYXRvcmAgYWxsb3dzIGNyZWF0aW5nIGNvbXBpbGVycyB0aGF0IHVzZSBhbHRlcm5hdGl2ZQovLyBwYXJzZXIvb3B0aW1pemVyL2NvZGVnZW4sIGUuZyB0aGUgU1NSIG9wdGltaXppbmcgY29tcGlsZXIuCi8vIEhlcmUgd2UganVzdCBleHBvcnQgYSBkZWZhdWx0IGNvbXBpbGVyIHVzaW5nIHRoZSBkZWZhdWx0IHBhcnRzLgoKZXhwb3J0IHZhciBjcmVhdGVDb21waWxlciA9IGNyZWF0ZUNvbXBpbGVyQ3JlYXRvcihmdW5jdGlvbiBiYXNlQ29tcGlsZSh0ZW1wbGF0ZSwgb3B0aW9ucykgewogIHZhciBhc3QgPSBwYXJzZSh0ZW1wbGF0ZS50cmltKCksIG9wdGlvbnMpOwoKICBpZiAob3B0aW9ucy5vcHRpbWl6ZSAhPT0gZmFsc2UpIHsKICAgIG9wdGltaXplKGFzdCwgb3B0aW9ucyk7CiAgfQoKICB2YXIgY29kZSA9IGdlbmVyYXRlKGFzdCwgb3B0aW9ucyk7CiAgcmV0dXJuIHsKICAgIGFzdDogYXN0LAogICAgcmVuZGVyOiBjb2RlLnJlbmRlciwKICAgIHN0YXRpY1JlbmRlckZuczogY29kZS5zdGF0aWNSZW5kZXJGbnMKICB9Owp9KTs="},{"version":3,"sources":["/Users/tech/workspace/demo/vue-demo/src/vueResource/compiler/index.js"],"names":["parse","optimize","generate","createCompilerCreator","createCompiler","baseCompile","template","options","ast","trim","code","render","staticRenderFns"],"mappings":";;AAAA;AAEA,SAAQA,KAAR,QAAoB,gBAApB;AACA,SAAQC,QAAR,QAAuB,aAAvB;AACA,SAAQC,QAAR,QAAuB,iBAAvB;AACA,SAAQC,qBAAR,QAAoC,mBAApC,C,CAEA;AACA;AACA;;AACA,OAAO,IAAMC,cAAc,GAAGD,qBAAqB,CAAC,SAASE,WAAT,CAClDC,QADkD,EAElDC,OAFkD,EAGlD;AACA,MAAMC,GAAG,GAAGR,KAAK,CAACM,QAAQ,CAACG,IAAT,EAAD,EAAkBF,OAAlB,CAAjB;;AACA,MAAIA,OAAO,CAACN,QAAR,KAAqB,KAAzB,EAAgC;AAC9BA,IAAAA,QAAQ,CAACO,GAAD,EAAMD,OAAN,CAAR;AACD;;AACD,MAAMG,IAAI,GAAGR,QAAQ,CAACM,GAAD,EAAMD,OAAN,CAArB;AACA,SAAO;AACLC,IAAAA,GAAG,EAAHA,GADK;AAELG,IAAAA,MAAM,EAAED,IAAI,CAACC,MAFR;AAGLC,IAAAA,eAAe,EAAEF,IAAI,CAACE;AAHjB,GAAP;AAKD,CAdkD,CAA5C","sourcesContent":["/*       */\n\nimport {parse} from './parser/index'\nimport {optimize} from './optimizer'\nimport {generate} from './codegen/index'\nimport {createCompilerCreator} from './create-compiler'\n\n// `createCompilerCreator` allows creating compilers that use alternative\n// parser/optimizer/codegen, e.g the SSR optimizing compiler.\n// Here we just export a default compiler using the default parts.\nexport const createCompiler = createCompilerCreator(function baseCompile(\n  template,\n  options\n) {\n  const ast = parse(template.trim(), options)\n  if (options.optimize !== false) {\n    optimize(ast, options)\n  }\n  const code = generate(ast, options)\n  return {\n    ast,\n    render: code.render,\n    staticRenderFns: code.staticRenderFns\n  }\n})\n"]}]}